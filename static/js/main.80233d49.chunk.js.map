{"version":3,"sources":["components/Card.js","components/CardList.js","components/robots.js","components/SearchBox.js","components/scroll.js","components/ErrorBoundry.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardComponents","map","user","i","key","username","SearchBox","searchfield","searchChange","type","placeholder","onChange","scroll","props","console","log","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filterRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.80233d49.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = ({name, email, id}) =>{\n\treturn(\n\t<div className = 'tc bg-light-green dib br4 pa3 ma2 bw2 shadow-5 grow'>\n\t\t<img alt='robot' src={`https://robohash.org/${id}`}/>\n\t\t<div>\n\t\t\t<h2>{name}</h2>\n\t\t\t<p>{email}</p>\n\t\t</div>\n\t</div>\n\t)\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\t\n\tconst cardComponents = robots.map((user, i) =>{\n\t\treturn (\n\t\t\t<Card \n\t\t\tkey={i}\n\t\t \tid={robots[i].id} \n\t\t \tname={robots[i].name} \n\t\t \temail={robots[i].email}/>\n\t\t )\n\t});\n\treturn (\n\t\t<div>\n\t\t\t{cardComponents}\n  \t\t</div>\n\t\t);\n}\n\nexport default CardList;","export const robots = [\n\t{\n\t\tid:1,\n\t\tname:'leane Graham',\n\t\tusername:'Beret',\n\t\temail:'leanegraham@gmail.com'\n\t},\n\t\t{\n\t\tid:2,\n\t\tname:'Jon Bellion',\n\t\tusername:'Bellion',\n\t\temail:'Jon@gmail.com'\n\t},\n\t\t{\n\t\tid:3,\n\t\tname:'Paul Smith',\n\t\tusername:'Paul',\n\t\temail:'paul@gmail.com'\n\t},\n\t\t{\n\t\tid:4,\n\t\tname:'David Garete',\n\t\tusername:'Garete',\n\t\temail:'davis@gmail.com'\n\t},\n\t\t{\n\t\tid:5,\n\t\tname:'lindon wars',\n\t\tusername:'lindon',\n\t\temail:'lindon@gmail.com'\n\t},\n\t\t{\n\t\tid:6,\n\t\tname:'Benny Bruce',\n\t\tusername:'Bruce',\n\t\temail:'benny@gmail.com'\n\t},\n\t\t{\n\t\tid:7,\n\t\tname:'liz Clapton',\n\t\tusername:'liz',\n\t\temail:'liz@gmail.com'\n\t},\n\t\t{\n\t\tid:8,\n\t\tname:'jonny Drille',\n\t\tusername:'jonny',\n\t\temail:'jonny@gmail.com'\n\t},\n\t\t{\n\t\tid:9,\n\t\tname:'Julie Joe',\n\t\tusername:'joe',\n\t\temail:'julie@gmail.com'\n\t},\n\t\t{\n\t\tid:10,\n\t\tname:'Lex Luther',\n\t\tusername:'lex',\n\t\temail:'luther@gmail.com'\n\t}\n]","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) =>{\n\treturn(\n\t\t\t<div className='pa2'>\n\t\t\t\t<input\n\t\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue' \n\t\t\t\t\ttype='search' \n\t\t\t\t\tplaceholder='search robots'\n\t\t\t\t\tonChange={searchChange}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst scroll = (props) =>{\n\tconsole.log(props)\n\treturn(\n\t\t\t<div style={{ overflowY: 'scroll', border:'1px black solid', height:'500px' }}>\n\t\t\t\t{props.children}\n\t\t\t</div>\n\t\t) \n}\n\n\nexport default scroll","import React ,{Component} from 'react';\n\nclass ErrorBoundry extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError:false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info){\n\t\tthis.setState({hasError:true})\n\t}\n\n\n\trender() {\n\n\t\tif(this.state.hasError){\n\t\t\treturn <h1>oooops .something happened</h1>\n\t\t}\n\t\treturn (\n\t\t\t\tthis.props.children\n\t\t)\n\t}\n\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport CardList from './components/CardList';\nimport { robots } from './components/robots';\nimport SearchBox from './components/SearchBox';\nimport Scroll from './components/scroll'\nimport './containers/App.css'\nimport ErrorBoundry from './components/ErrorBoundry'\n\n\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => { this.setState({ robots: robots }) })\n\n    }\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value })\n    }\n\n    render() {\n        const { robots, searchfield } = this.state;\n        const filterRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        })\n        return !robots.length ?\n            <h1>loading</h1> :\n            (\n                <div className = 'tc'>\n\t\t\t\t\t\t\t<h1>RoboFriends</h1>\n\t\t\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t\t\t<CardList robots={filterRobots}/>\n\t\t\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t\t\t\t</Scroll>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\n            )\n\n\n\n    }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}